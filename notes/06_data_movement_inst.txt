NASM syntax
-----------
MOV desstination, source

GAS syntax
----------
MOVx source, destination

movl = moves 32 bit value: 	movl %eax, %ebx
movw = moves 16 bit value:	movw %ax, %bx
movb = moves 8 bit value:	movb %ah, %bh

Data Movement:
---------------
# Reg - Reg
-----------
movl %eax, %ebx

# Reg and memory
-----------------
location: .int 10
movl %eax, location
movl location, %ebx

short_loc: .short 3
movw location, %eax		#eax = location
movw %ebx, location		#location = ebx

# immediate value into regiser
-----------------------------
mov $10,%eax	# eax = 10

# immediate value into memory
------------------------------
location: .byte 0
movb $10, location

# Moving data into an indexed memory location
----------------------------------------------
int_array: .int 10,20,30,40,50

. Select the 3rd integer 30
BaseAddress(offset, index, size)
int_array(0,2,4)

movl %eax, int_array(0,2,4)

Indirect Addressing using registers
-----------------------------------
# Placing the "$" sign before a label name => take the memory address of the
	variable and not the value. Move the address of location to edi
movl $location, %edi

# Place value "9" in memory location pointed by EDI
movl $9,(%edi)

# place value "9" in memory location pointed by (EDI + 4)
movl $9, 4(%edi)

# place value "9" in memory location pointed by (EDI - 2)
mov1 $9, -2(%edi)


